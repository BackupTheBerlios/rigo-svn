/////////////////////////////////////////////////////////////////////////////
// Name:        mainFrame.cpp
// Purpose:     
// Author:      Jeremy W
// Modified by: 
// Created:     07/18/06 20:02:50
// RCS-ID:      
// Copyright:   Copyright (C) 2006
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (Personal Edition), 07/18/06 20:02:50

#if defined(__GNUG__) && !defined(__APPLE__)
#pragma implementation "mainFrame.h"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "mainFrame.h"

////@begin XPM images
////@end XPM images

/*!
 * rigoMainFrame type definition
 */

IMPLEMENT_CLASS( rigoMainFrame, wxFrame )

/*!
 * rigoMainFrame event table definition
 */

BEGIN_EVENT_TABLE( rigoMainFrame, wxFrame )

////@begin rigoMainFrame event table entries
    EVT_CLOSE( rigoMainFrame::OnCloseWindow )

    EVT_MENU( New, rigoMainFrame::OnNewClick )

    EVT_MENU( Save, rigoMainFrame::OnSaveClick )

    EVT_MENU( Quit, rigoMainFrame::OnQuitClick )

    EVT_MENU( Cut, rigoMainFrame::OnCutClick )

    EVT_MENU( Copy, rigoMainFrame::OnCopyClick )

    EVT_MENU( Profile, rigoMainFrame::OnProfileClick )

    EVT_MENU( Export, rigoMainFrame::OnExportClick )

    EVT_MENU( NewSource, rigoMainFrame::OnNewsourceClick )

    EVT_MENU( NewQuote, rigoMainFrame::OnNewquoteClick )

    EVT_MENU( NewAnnotation, rigoMainFrame::OnNewannotationClick )

    EVT_MENU( Open, rigoMainFrame::OnOpenClick )

    EVT_MENU( Print, rigoMainFrame::OnPrintClick )

    EVT_MENU( Writebiblo, rigoMainFrame::OnWritebibloClick )

    EVT_COMBOBOX( ID_COMBOBOX, rigoMainFrame::OnComboboxSelected )
    EVT_UPDATE_UI( ID_COMBOBOX, rigoMainFrame::OnComboboxUpdate )

////@end rigoMainFrame event table entries

END_EVENT_TABLE()

/*!
 * rigoMainFrame constructors
 */

rigoMainFrame::rigoMainFrame( )
{
}

rigoMainFrame::rigoMainFrame( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Create( parent, id, caption, pos, size, style );
}

/*!
 * rigoMainFrame creator
 */

bool rigoMainFrame::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin rigoMainFrame member initialisation
////@end rigoMainFrame member initialisation

////@begin rigoMainFrame creation
    wxFrame::Create( parent, id, caption, pos, size, style );

    CreateControls();
    SetIcon(GetIconResource(wxT("database_gear.png")));
    Centre();
////@end rigoMainFrame creation
    return TRUE;
}

/*!
 * Control creation for rigoMainFrame
 */

void rigoMainFrame::CreateControls()
{    
////@begin rigoMainFrame content construction
    // Generated by DialogBlocks, 07/18/06 21:14:36 (Personal Edition)

    rigoMainFrame* itemFrame1 = this;

    wxMenuBar* menuBar = new wxMenuBar;
    wxMenu* itemMenu3 = new wxMenu;
    {
        wxMenuItem* menuItem = new wxMenuItem(itemMenu3, New, _("New"), _T(""), wxITEM_NORMAL);
        wxBitmap bitmap(itemFrame1->GetBitmapResource(wxT("page_attach.png")));
        menuItem->SetBitmap(bitmap);
        itemMenu3->Append(menuItem);
    }
    {
        wxMenuItem* menuItem = new wxMenuItem(itemMenu3, Save, _("Save"), _T(""), wxITEM_NORMAL);
        wxBitmap bitmap(itemFrame1->GetBitmapResource(wxT("disk.png")));
        menuItem->SetBitmap(bitmap);
        itemMenu3->Append(menuItem);
    }
    {
        wxMenuItem* menuItem = new wxMenuItem(itemMenu3, Quit, _("Quit"), _T(""), wxITEM_NORMAL);
        wxBitmap bitmap(itemFrame1->GetBitmapResource(wxT("door_in.png")));
        menuItem->SetBitmap(bitmap);
        itemMenu3->Append(menuItem);
    }
    menuBar->Append(itemMenu3, _("File"));
    wxMenu* itemMenu7 = new wxMenu;
    {
        wxMenuItem* menuItem = new wxMenuItem(itemMenu7, Cut, _("Cut"), _T(""), wxITEM_NORMAL);
        wxBitmap bitmap(itemFrame1->GetBitmapResource(wxT("cut_red.png")));
        menuItem->SetBitmap(bitmap);
        itemMenu7->Append(menuItem);
    }
    {
        wxMenuItem* menuItem = new wxMenuItem(itemMenu7, Copy, _("Copy"), _T(""), wxITEM_NORMAL);
        wxBitmap bitmap(itemFrame1->GetBitmapResource(wxT("page_refresh.png")));
        menuItem->SetBitmap(bitmap);
        itemMenu7->Append(menuItem);
    }
    {
        wxMenuItem* menuItem = new wxMenuItem(itemMenu7, Profile, _("Profile"), _T(""), wxITEM_NORMAL);
        wxBitmap bitmap(itemFrame1->GetBitmapResource(wxT("user_edit.png")));
        menuItem->SetBitmap(bitmap);
        itemMenu7->Append(menuItem);
    }
    {
        wxMenuItem* menuItem = new wxMenuItem(itemMenu7, Export, _("Export"), _T(""), wxITEM_NORMAL);
        wxBitmap bitmap(itemFrame1->GetBitmapResource(wxT("wrench_orange.png")));
        menuItem->SetBitmap(bitmap);
        itemMenu7->Append(menuItem);
    }
    menuBar->Append(itemMenu7, _("&Edit"));
    wxMenu* itemMenu12 = new wxMenu;
    {
        wxMenuItem* menuItem = new wxMenuItem(itemMenu12, NewSource, _("New Source"), _T(""), wxITEM_NORMAL);
        wxBitmap bitmap(itemFrame1->GetBitmapResource(wxT("book_edit.png")));
        menuItem->SetBitmap(bitmap);
        itemMenu12->Append(menuItem);
    }
    {
        wxMenuItem* menuItem = new wxMenuItem(itemMenu12, NewQuote, _("Add  Quotation"), _T(""), wxITEM_NORMAL);
        wxBitmap bitmap(itemFrame1->GetBitmapResource(wxT("comment_add.png")));
        menuItem->SetBitmap(bitmap);
        itemMenu12->Append(menuItem);
    }
    {
        wxMenuItem* menuItem = new wxMenuItem(itemMenu12, NewAnnotation, _("Add Annotation"), _T(""), wxITEM_NORMAL);
        wxBitmap bitmap(itemFrame1->GetBitmapResource(wxT("email_add.png")));
        menuItem->SetBitmap(bitmap);
        itemMenu12->Append(menuItem);
    }
    menuBar->Append(itemMenu12, _("Tools"));
    itemFrame1->SetMenuBar(menuBar);

    wxToolBar* itemToolBar16 = CreateToolBar( wxTB_FLAT|wxTB_HORIZONTAL, Rigo_Toolbar );
    itemToolBar16->SetMargins(5, 1);
    itemToolBar16->SetToolBitmapSize(wxSize(16, 16));
    wxBitmap itemtool17Bitmap(itemFrame1->GetBitmapResource(wxT("folder_page_white.png")));
    itemToolBar16->AddTool(Open, _T(""), itemtool17Bitmap, _("Open"), wxITEM_NORMAL);
    wxBitmap itemtool18Bitmap(itemFrame1->GetBitmapResource(wxT("wrench_orange.png")));
    itemToolBar16->AddTool(Export, _T(""), itemtool18Bitmap, _("Export"), wxITEM_NORMAL);
    wxBitmap itemtool19Bitmap(itemFrame1->GetBitmapResource(wxT("printer.png")));
    itemToolBar16->AddTool(Print, _T(""), itemtool19Bitmap, _("Print"), wxITEM_NORMAL);
    wxBitmap itemtool20Bitmap(itemFrame1->GetBitmapResource(wxT("disk.png")));
    itemToolBar16->AddTool(Save, _T(""), itemtool20Bitmap, _("Save"), wxITEM_NORMAL);
    itemToolBar16->AddSeparator();
    wxBitmap itemtool22Bitmap(itemFrame1->GetBitmapResource(wxT("page_edit.png")));
    itemToolBar16->AddTool(Writebiblo, _T(""), itemtool22Bitmap, _("Biblography"), wxITEM_NORMAL);
    wxString itemComboBox23Strings[] = {
        _("Source2; Source 3")
    };
    wxComboBox* itemComboBox23 = new wxComboBox( itemToolBar16, ID_COMBOBOX, _("Source1"), wxDefaultPosition, wxDefaultSize, 1, itemComboBox23Strings, wxCB_READONLY );
    itemComboBox23->SetStringSelection(_("Source1"));
    itemToolBar16->AddControl(itemComboBox23);
    itemToolBar16->Realize();
    itemFrame1->SetToolBar(itemToolBar16);

    wxPanel* itemPanel24 = new wxPanel( itemFrame1, ID_PANEL, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxTAB_TRAVERSAL );

    wxGridSizer* itemGridSizer25 = new wxGridSizer(1, 1, 0, 0);
    itemPanel24->SetSizer(itemGridSizer25);

    wxNotebook* itemNotebook26 = new wxNotebook( itemPanel24, ID_NOTEBOOK, wxDefaultPosition, wxSize(100, 100), wxNB_TOP );

    itemGridSizer25->Add(itemNotebook26, 0, wxGROW|wxGROW|wxALL, 0);

    wxStatusBar* itemStatusBar27 = new wxStatusBar( itemFrame1, ID_STATUSBAR, wxST_SIZEGRIP|wxNO_BORDER );
    itemStatusBar27->SetFieldsCount(2);
    itemFrame1->SetStatusBar(itemStatusBar27);

////@end rigoMainFrame content construction
}


/*!
 * wxEVT_UPDATE_UI event handler for ID_COMBOBOX
 */

void rigoMainFrame::OnComboboxUpdate( wxUpdateUIEvent& event )
{
////@begin wxEVT_UPDATE_UI event handler for ID_COMBOBOX in rigoMainFrame.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_UPDATE_UI event handler for ID_COMBOBOX in rigoMainFrame. 
}

/*!
 * Should we show tooltips?
 */

bool rigoMainFrame::ShowToolTips()
{
    return TRUE;
}

/*!
 * Get bitmap resources
 */

wxBitmap rigoMainFrame::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin rigoMainFrame bitmap retrieval
    if (name == wxT("page_attach.png"))
    {
        wxBitmap bitmap(_T("page_attach.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == wxT("disk.png"))
    {
        wxBitmap bitmap(_T("disk.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == wxT("door_in.png"))
    {
        wxBitmap bitmap(_T("door_in.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == wxT("cut_red.png"))
    {
        wxBitmap bitmap(_T("cut_red.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == wxT("page_refresh.png"))
    {
        wxBitmap bitmap(_T("page_refresh.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == wxT("user_edit.png"))
    {
        wxBitmap bitmap(_T("user_edit.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == wxT("wrench_orange.png"))
    {
        wxBitmap bitmap(_T("wrench_orange.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == wxT("book_edit.png"))
    {
        wxBitmap bitmap(_T("book_edit.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == wxT("comment_add.png"))
    {
        wxBitmap bitmap(_T("comment_add.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == wxT("email_add.png"))
    {
        wxBitmap bitmap(_T("email_add.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == wxT("folder_page_white.png"))
    {
        wxBitmap bitmap(_T("folder_page_white.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == wxT("printer.png"))
    {
        wxBitmap bitmap(_T("printer.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == wxT("page_edit.png"))
    {
        wxBitmap bitmap(_T("page_edit.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    return wxNullBitmap;
////@end rigoMainFrame bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon rigoMainFrame::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin rigoMainFrame icon retrieval
    if (name == wxT("database_gear.png"))
    {
        wxIcon icon(_T("database_gear.png"), wxBITMAP_TYPE_PNG);
        return icon;
    }
    return wxNullIcon;
////@end rigoMainFrame icon retrieval
}
/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for New
 */

void rigoMainFrame::OnNewClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_MENU_SELECTED event handler for New in rigoMainFrame.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_MENU_SELECTED event handler for New in rigoMainFrame. 
}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for Save
 */

void rigoMainFrame::OnSaveClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_MENU_SELECTED event handler for Save in rigoMainFrame.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_MENU_SELECTED event handler for Save in rigoMainFrame. 
}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for Quit
 */

void rigoMainFrame::OnQuitClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_MENU_SELECTED event handler for Quit in rigoMainFrame.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_MENU_SELECTED event handler for Quit in rigoMainFrame. 
}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for Cut
 */

void rigoMainFrame::OnCutClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_MENU_SELECTED event handler for Cut in rigoMainFrame.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_MENU_SELECTED event handler for Cut in rigoMainFrame. 
}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for Copy
 */

void rigoMainFrame::OnCopyClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_MENU_SELECTED event handler for Copy in rigoMainFrame.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_MENU_SELECTED event handler for Copy in rigoMainFrame. 
}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for Profile
 */

void rigoMainFrame::OnProfileClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_MENU_SELECTED event handler for Profile in rigoMainFrame.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_MENU_SELECTED event handler for Profile in rigoMainFrame. 
}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for Export
 */

void rigoMainFrame::OnExportClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_MENU_SELECTED event handler for Export in rigoMainFrame.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_MENU_SELECTED event handler for Export in rigoMainFrame. 
}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for NewSource
 */

void rigoMainFrame::OnNewsourceClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_MENU_SELECTED event handler for NewSource in rigoMainFrame.
    // Before editing this code, remove the block markers.
////@end wxEVT_COMMAND_MENU_SELECTED event handler for NewSource in rigoMainFrame. 
}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for NewQuote
 */

void rigoMainFrame::OnNewquoteClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_MENU_SELECTED event handler for NewQuote in rigoMainFrame.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_MENU_SELECTED event handler for NewQuote in rigoMainFrame. 
}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for NewAnnotation
 */

void rigoMainFrame::OnNewannotationClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_MENU_SELECTED event handler for NewAnnotation in rigoMainFrame.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_MENU_SELECTED event handler for NewAnnotation in rigoMainFrame. 
}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for Open
 */

void rigoMainFrame::OnOpenClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_MENU_SELECTED event handler for Open in rigoMainFrame.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_MENU_SELECTED event handler for Open in rigoMainFrame. 
}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for Print
 */

void rigoMainFrame::OnPrintClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_MENU_SELECTED event handler for Print in rigoMainFrame.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_MENU_SELECTED event handler for Print in rigoMainFrame. 
}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for Writebiblo
 */

void rigoMainFrame::OnWritebibloClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_MENU_SELECTED event handler for Writebiblo in rigoMainFrame.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_MENU_SELECTED event handler for Writebiblo in rigoMainFrame. 
}

/*!
 * wxEVT_COMMAND_COMBOBOX_SELECTED event handler for ID_COMBOBOX
 */

void rigoMainFrame::OnComboboxSelected( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_COMBOBOX_SELECTED event handler for ID_COMBOBOX in rigoMainFrame.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_COMBOBOX_SELECTED event handler for ID_COMBOBOX in rigoMainFrame. 
}


/*!
 * wxEVT_CLOSE_WINDOW event handler for Rigo
 */

void rigoMainFrame::OnCloseWindow( wxCloseEvent& event )
{
////@begin wxEVT_CLOSE_WINDOW event handler for Rigo in rigoMainFrame.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_CLOSE_WINDOW event handler for Rigo in rigoMainFrame. 
}


